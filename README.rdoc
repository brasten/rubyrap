Another Ruby library packager

This project hopes to provide a light-weight packaging (and distribution)
system for Ruby libraries.

Implementation targets have changed several times as I have conceptually gotten
used to ideas and decided I didn't like others.  At the moment I'm targeting 
something similar to Java's Maven repositories ( in terms of functionality ).

== Goals

The problems I'm trying to solve include:

* A simple way of modularizing Ruby code and using it in other Ruby projects.
  Initially, Rubygems seems like a fine way of doing this, but the format
  and methods are rigid.  Also, it gets non-intuitive if you are dealing with
  internal projects.
  
* RubyRap can be used as a utility on the development environment, but
  it should be possible to run Ruby projects without requiring RubyRap.
  RubyRap is not intended to be a runtime load_path manager.  ( Although it
  may allow for that to ease development.  More thought is needed on that. )

* While I don't envision and hard constraints at the moment for Raps, I would
  like to encourage certain standards -- perhaps through the use of validation
  messages or something.  Soft constraints can include:

  * Raps should be able to co-exist with each other in the same load path!
    
    To that end, I'm STRONGLY in favor of the practice laid out in
    the following post by Yehuda Katz:
    
    http://yehudakatz.com/2009/06/15/rubygems-problems-and-proposed-solutions

* It would be nice if packages were in a format more conducive to manual
  manipulation.  Java's JAR files are basically just zip files.

== (Soft?) Constraints on Raps

The following (soft?) constraints are designed to help achieve the goals stated above.

* <em>Library packages</em> must have following layout:
    Rapfile
    lib
       <library_name>.rb
       <library_name>
          ... unrestricted ...

* Library naming must use underscores to represent camelcasing, and dots to
  represent module hierarchies.

    ie:  A library that is primarily based on a module called
         Rack::SuperCoolExtension must be called rack.super_cool_extension.

* Naming constraints do not necessarily apply to actual module namespacing,
  though that would be good practice.  But it is entirely possible to package
  up code that pollutes the global namespace or does not follow the naming
  scheme you might expect from the file layout.

* A library should not reference files from its own project that exist outside
  the lib folder.


== WARNING

This is just a pet project of mine.  It doesn't even function at the moment.
However, if you like the general idea and want to contribute code, ideals,
or even encouragement, please fork or watch the repo or fire off an email!


=== Authors

Brasten Sager
brasten@nagilum.com